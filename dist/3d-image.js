!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.image3D=e():t.image3D=e()}(window,function(){return function(t){var e={};function i(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(n,r,function(e){return t[e]}.bind(null,r));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=new(i(1).default);e.default=n},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=i(2),r=i(3);e.default=class{constructor(){this.images=[]}process(t){let e;if(n.isString(t)?e=document.querySelector(t):n.isElement(t)&&(e=t),!e)return;const i=e.getAttribute("data-src"),o=e.getAttribute("data-depth-src"),a=new r.default(e,i,o);this.images.push(a)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.isWindow=function(t){return!!t&&t===t.window},e.isDocument=function(t){return!!t&&9===t.nodeType},e.isElement=function(t){return!!t&&1===t.nodeType},e.isFunction=function(t){return"function"==typeof t},e.isString=function(t){return"string"==typeof t},e.isNumeric=function(t){return!isNaN(parseFloat(t))&&isFinite(t)}},function(t,e,i){"use strict";var n=this&&this.__awaiter||function(t,e,i,n){return new(i||(i=Promise))(function(r,o){function a(t){try{u(n.next(t))}catch(t){o(t)}}function s(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){t.done?r(t.value):new i(function(e){e(t.value)}).then(a,s)}u((n=n.apply(t,e||[])).next())})};Object.defineProperty(e,"__esModule",{value:!0});const r=i(4),o=i(5),a=i(6),s=i(7);e.default=class{constructor(t,e,i){this.target=t,this.src=e,this.depthSrc=i,this.blockRepaint=!1,this.pixelRatio=1,this.setup()}setup(){return n(this,void 0,void 0,function*(){this.canvas=yield this.createCanvas(this.target),this.target.appendChild(this.canvas),r.default.subscribe({target:this.target,onVisible:()=>this.blockRepaint=!1,onInvisible:()=>this.blockRepaint=!0})})}loadImage(t){return n(this,void 0,void 0,function*(){const e=new Image;return e.src=t,yield new Promise(t=>e.onload=t),e})}createCanvas(t){return n(this,void 0,void 0,function*(){const t=yield this.loadImage(this.src),e=yield this.loadImage(this.depthSrc),i=document.createElement("canvas");i.height=t.height*this.pixelRatio,i.width=t.width*this.pixelRatio;const n=i.getContext("webgl");Object.assign(i.style,{maxWidth:"100vw",maxHeight:"100vh",objectFit:"contain",width:"100%",height:"100%"});const r=n.createBuffer();n.bindBuffer(n.ARRAY_BUFFER,r),n.bufferData(n.ARRAY_BUFFER,new Float32Array([-1,-1,-1,1,1,-1,1,1]),n.STATIC_DRAW),n.vertexAttribPointer(0,2,n.FLOAT,!1,0,0),n.enableVertexAttribArray(0);const u=o.default,c=n.createShader(n.VERTEX_SHADER);n.shaderSource(c,u),n.compileShader(c);const l=a.default,d=n.createShader(n.FRAGMENT_SHADER);n.shaderSource(d,l),n.compileShader(d);const f=n.createProgram();function h(t,e,i){var r=n.createTexture();n.activeTexture(n.TEXTURE0+i),n.bindTexture(n.TEXTURE_2D,r),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.LINEAR),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texImage2D(n.TEXTURE_2D,0,n.RGBA,n.RGBA,n.UNSIGNED_BYTE,t),n.uniform1i(n.getUniformLocation(f,e),i)}n.attachShader(f,d),n.attachShader(f,c),n.linkProgram(f),n.useProgram(f),h(t,"img",0),h(e,"depth",1);const p=()=>{this.blockRepaint||(n.clearColor(.25,.65,1,1),n.clear(n.COLOR_BUFFER_BIT),n.drawArrays(n.TRIANGLE_STRIP,0,4))};p();const b=n.getUniformLocation(f,a.MOUSE_VECTOR_NAME);return i.onmousemove=function(t){const e=s.getRelativeMousePosition(t);n.uniform2fv(b,new Float32Array(e)),requestAnimationFrame(()=>p())},s.DeviceOrientation.subscribe((t,e,i)=>{const r=[-.015*i,-.015*e];n.uniform2fv(b,new Float32Array(r)),requestAnimationFrame(()=>p())}),this.gl=n,i})}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n="data-ioid";e.default=new class{constructor(){this.subscribers={},this.subscribersCount=0,this.intersectionObserver=new IntersectionObserver(t=>{t.forEach(t=>{const e=t.target,i=e.getAttribute(n),r=this.subscribers[i];r&&(t.isIntersecting?(r.onVisible(),console.log("VISIBLE!",e)):(r.onInvisible(),console.log("invisible!",e)))})},{root:null,rootMargin:"0px 0px 0px 0px",threshold:0})}subscribe(t){const{target:e,onVisible:i,onInvisible:r}=t;if(!e)return;this.subscribersCount++;const o=this.subscribersCount.toString();e.setAttribute(n,o),this.subscribers[o]=t,this.intersectionObserver.observe(e)}unsubscribe(t){}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default="\n    attribute vec2 pos;\n    varying vec2 vpos;\n    void main(){\n        vpos = pos*-0.5 + vec2(0.5);\n        gl_Position = vec4(pos, 0.0, 1.0);\n    }\n    "},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MOUSE_VECTOR_NAME="mouse",e.default=`\n    precision highp float;\n    uniform sampler2D img;\n    uniform sampler2D depth;\n    uniform vec2 ${e.MOUSE_VECTOR_NAME};\n    varying vec2 vpos;\n    void main(){\n        float dp = -0.5 + texture2D(depth, vpos).x;\n        gl_FragColor = texture2D(img, vpos + ${e.MOUSE_VECTOR_NAME} * 0.2 * dp);\n    }\n    `},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getRelativeMousePosition=function(t){const e=t.target.getBoundingClientRect(),i=e.width,n=e.height,r=e.left,o=e.top;return[(t.clientX-r)/i-.5,.5-(t.clientY-o)/n]};e.DeviceOrientation=new class{constructor(){this.subscribers=[],this.initialData=null,this.data={alpha:0,beta:0,gamma:0},window.addEventListener("deviceorientation",t=>{this.updateOrientationData(t),this.subscribers.forEach(t=>{t(this.data.alpha,this.data.beta,this.data.gamma)})},!1)}subscribe(t){this.subscribers.push(t)}updateOrientationData(t){this.initialData||(this.initialData={alpha:t.alpha,beta:t.beta,gamma:t.gamma}),this.data.alpha=t.alpha-this.initialData.alpha,this.data.gamma=-1*(-t.gamma+this.initialData.gamma),this.data.beta=-1*(t.beta-this.initialData.beta)}}}]).default});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,